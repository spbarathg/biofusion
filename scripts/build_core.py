#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil
import platform
from pathlib import Path

# Get the project root
ROOT_DIR = Path(__file__).parent.parent.absolute()
RUST_DIR = ROOT_DIR / "rust_core"
BINDINGS_DIR = ROOT_DIR / "src" / "bindings"

def get_library_extension():
    """Get the platform-specific library extension"""
    system = platform.system()
    if system == "Windows":
        return ".dll"
    elif system == "Darwin":  # macOS
        return ".dylib"
    else:  # Linux and other UNIX-like systems
        return ".so"

def build_rust_core():
    """Build the Rust core library"""
    print("Building Rust core...")
    
    # Create the build command
    build_cmd = ["cargo", "build", "--release"]
    
    # Run the build command
    result = subprocess.run(
        build_cmd,
        cwd=RUST_DIR,
        capture_output=True,
        text=True
    )
    
    # Check for build errors
    if result.returncode != 0:
        print("Error building Rust core:")
        print(result.stderr)
        return False
    
    print("Successfully built Rust core!")
    return True

def copy_library():
    """Copy the compiled library to the bindings directory"""
    print("Copying library to bindings directory...")
    
    # Ensure the bindings directory exists
    if not BINDINGS_DIR.exists():
        BINDINGS_DIR.mkdir(parents=True, exist_ok=True)
    
    # Get the library extension
    lib_ext = get_library_extension()
    
    # Determine library path
    lib_name = f"libant_bot_core{lib_ext}"
    source_path = RUST_DIR / "target" / "release" / lib_name
    
    if not source_path.exists():
        print(f"Error: Could not find built library at {source_path}")
        return False
    
    # Destination path
    dest_path = BINDINGS_DIR / lib_name
    
    # Copy the library
    shutil.copy2(source_path, dest_path)
    print(f"Copied library to {dest_path}")
    
    return True

def create_header():
    """Create C header file for FFI"""
    print("Generating C header file...")
    
    # Create cbindgen command
    header_path = BINDINGS_DIR / "ant_bot_core.h"
    cmd = [
        "cbindgen",
        "--config", RUST_DIR / "cbindgen.toml",
        "--output", header_path,
        "--crate", "ant_bot_core",
        RUST_DIR
    ]
    
    try:
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True
        )
        
        if result.returncode != 0:
            print("Warning: Failed to generate header file:")
            print(result.stderr)
            return False
        
        print(f"Generated header file at {header_path}")
        return True
    except FileNotFoundError:
        print("Warning: cbindgen not found. Skipping header generation.")
        return False

def create_init_file():
    """Create or update __init__.py in bindings directory"""
    init_path = BINDINGS_DIR / "__init__.py"
    
    with open(init_path, "w") as f:
        f.write("""# Ant Bot Core Bindings
# This file is auto-generated by scripts/build_core.py

import os
import platform
from pathlib import Path

# Define the library name based on platform
if platform.system() == "Windows":
    LIB_NAME = "libant_bot_core.dll"
elif platform.system() == "Darwin":  # macOS
    LIB_NAME = "libant_bot_core.dylib"
else:  # Linux and other UNIX-like systems
    LIB_NAME = "libant_bot_core.so"

# Get the path to the library
LIB_PATH = str(Path(__file__).parent / LIB_NAME)

# Check if the library exists
if not os.path.exists(LIB_PATH):
    raise ImportError(f"Rust core library not found at {LIB_PATH}")
""")
    
    print(f"Created __init__.py at {init_path}")
    return True

def main():
    """Main build function"""
    print(f"Building AntBot Core from {RUST_DIR}")
    
    if not build_rust_core():
        sys.exit(1)
    
    if not copy_library():
        sys.exit(1)
    
    create_header()  # Optional, don't fail if it doesn't work
    create_init_file()
    
    print("Build completed successfully!")

if __name__ == "__main__":
    main() 